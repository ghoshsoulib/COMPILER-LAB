#include<bits/stdc++.h>
using namespace std;

int main()
{
	//THE LIST OF THE KEYWORDS THAT COMMONLY OCCURS IN A C CODE
	//THIS IS STORED IN THE FORM - ARRAY OF STRINGS
	string KEYWORDS[]={"auto","break","case","char","const","continue","default",
	"do","double","else","enum","extern","float","for","goto",
	"if","int","long int","register","return","short","signed",
	"sizeof","static","struct","switch","typedef","union",
	"unsigned","void","volatile","while","long long int"};
	// END OF KEYWORD LIST

	//THE LIST OF THE OPERATORS THAT COMMONLY OCCURS IN A C CODE
	//THIS IS STORED AS A STRING. WE HAVE ASSUMED THAT EACH OPERATOR WILL BE A SINGLE CHARACTER	
	char OPERATORS[]="+-*/%><=";
	//END OF OPERATOR LIST	

	//THE LIST OF THE SEPERATORS THAT COMMONLY OCCURS IN A C CODE
	//THIS IS STORED AS A STRING. WE HAVE ASSUMED THAT EACH OPERATOR WILL BE A SINGLE CHARACTER
	char SEPERATORS[]="();:\'\",.[]{}";
	//END OF SEPERATOR LIST

	//EACH ARRAY IS CONVERTED TO SET FOR THE EASY ACCESS OF ELEMENT.
	set<string> keyword(KEYWORDS,KEYWORDS+33);//KEYWORD SET
	set<char> operators(OPERATORS,OPERATORS+8);//OPERATORS SET
	set<char> seperators(SEPERATORS,SEPERATORS+12);//SEPERATORS SET
	//END OF CREATING SET

/* 
BRIEF DESCRIPTION

1)WE HAVE A LIST OF KEYWORDS, SEPERATORS AND OPERATORS
2)THE INPUT C FILE IS SCANNED. 
3)WE KEEP A BUFFER STRING (HERE NAME LINE) WHICH KEEPS THE STRING SEPERATED BY "SPACE" OR "NEW LINE"
4)EACH CHARACTER IS INSERTED IN THE BUFFER STRING UNTIL A SPACE OR NEW LINE OR SEPERATOR OR OPERATOR OCCURS.
5)WHEN WE ENCOUNTER A SPACE OR NEW LINE OR SEPERATOR OR OPERATOR
	IF THE SIZE OF PRESENT BUFFER IS NOT EMPTY
		THEN THE PRESENT BUFFER WILL BE EITHER IDENTIFIER OR A KYWORD.
		WE CHECK WHEATHER IT IS IDENTIFIER OR KEYWORD AND GIVE OUTPUT
		CLEAR THE BUFFER
	ELSE
		THE CURRENT CHARACTER WILL BE EITHER SEPERATOR OR OPERATOR
		WE CHECK AND GIVE THE OUTPUT ACCORDINGLY
		CLEAR THE BUFFER
	END
END

*/

	//***********************************MAIN PROGRAMME BEGINS*******************************************
	cout << "NAME\t" << "TYPE\t\t" << "ROW\t" << "COLOUMN" << endl; //FORMAT OF OUTPUT
	ifstream loop("c.txt");//READ THE TEXT FILE.
	// CHECKING IF THERE IS A PROBLEM TO OPEN THE FILE OR NOT
	if(!loop)
	{
		cout<<"THERE IS A PROBLEM TO OPEN THE FILE\n";
		return 0;
	}
	// CHECKING DONE

	char PRESENT;//THE CHARACTER BEAING READ 
	string LINE="";//SET CURRENT BUFFER TO EMPTY STRING
	int ROW_NUMBER=1,COLOUMN_NUMBER=1;//SET ROW AND COL NUMBER TO ONE	

	//SCAN THE ENTIRE FILE AND DO THE FOLLOWING OPERATIONS
	while(loop)
	{
		loop >> noskipws >> PRESENT;
		
		//READ THE CURRENT BUFFER
		//IF IT IS NOT OPERATOR OR SEPERATOR
		//IT IS A NEWLINE OR SPACE
		//DO THE FOLLOWING
		if((PRESENT==' '|| PRESENT=='\n') || (seperators.find(PRESENT)!=seperators.end()) || (operators.find(PRESENT)!=operators.end()))
		{
			//IF THE CURRENT BUFFER SPLITTED BY SEPERATORS WILL BE EITHER KEYWORD OR IDENTIFIER
			//IF THE CURRENT BUFFER IS EMPTY
			if(LINE.size()!=0)
			{
				if(keyword.find(LINE)!=keyword.end())
					cout<<LINE<<"\t" << "Keyword\t\t"<<ROW_NUMBER<<"\t"<<(COLOUMN_NUMBER - LINE.size()) << endl;
				else
					cout<<LINE<<"\t" << "Identifier\t"<<ROW_NUMBER<<"\t"<<(COLOUMN_NUMBER - LINE.size()) << endl;
			}
			//END OF PROCESS

			//IF THE CURRENT BUFFER IS EMPTY DO THE FOLLOWING

			//CHECKING IF THE CURRENT BUFFER IS A SEPERATOR OR NOT AND DO THE FOLLOWING CHANGES
			//OUTPUT IT AS A SEPERATOR
			//INCREASE COL NUMBER
			//CLEAR THE CURRENT BUFFER	
			if(seperators.find(PRESENT)!=seperators.end())
			{
				cout<<PRESENT<<"\t"<<"Seperator\t"<<ROW_NUMBER<<"\t"<<COLOUMN_NUMBER<<endl;
				COLOUMN_NUMBER++;
				LINE.clear();
			}
			//END OF PROCESS

			//CHECKING IF THE CURRENT BUFFER IS AN OPERATOR OR NOT AND DO THE FOLLOWING CHANGES
			//OUTPUT IT AS A OPERATOR.
			//INCREASE COL NUMBER
			//CLEAR THE CURRENT BUFFER
			else if(operators.find(PRESENT)!=operators.end()) 
			{
				cout<<PRESENT<<"\t"<<"operator\t"<<ROW_NUMBER<<"\t"<<COLOUMN_NUMBER<<"\n";
				COLOUMN_NUMBER++;
				LINE.clear();
			}
			//END OF PROCESS
			//WHEN NEXT LINE CHARACTER OCCURS
			else if(PRESENT=='\n')
			{
				ROW_NUMBER++;//INCREASE THE ROW NUMBER AS NEXT LINE OCCUR
				COLOUMN_NUMBER=1;//SET COL NUMBER TO ONE AS IT IS NEW LINE
			}
			//OTHERWISE			
			else
				COLOUMN_NUMBER++;//INCREASE COL NUMBER

			//END OF PROCESS

			LINE.clear();//CLEAR THE CURRENT LINE BUFFER
		}
		//END OF PROCESS
		else
		{
			COLOUMN_NUMBER++;//INCREASING COLOUMN NUMBER
			LINE+=PRESENT;//ADDING PRESENT CHARACTER TO THE LINE BUFFER
		}
		
	}
	loop.close();//CLOSING THE FILE
//************************************************END OF THE MAIN PROGRAMME******************************************
	return 0;
}
